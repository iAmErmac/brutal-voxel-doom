// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

struct NashGoreMath
{
	// Is number even?
	static bool IsEven(int n)
	{
		return (n % 2 == 0);
	}

	// Is number odd?
	static bool IsOdd(int n)
	{
		return !NashGoreMath.IsEven(n);
	}

	// Rotates a given vector in the direction of another one. Note that this assumes neither wish
	// nor current have a length of 0.
	// * current - The direction the vector is currently pointing. Automatically normalized.
	// * wish - The direction it wants to rotate towards. Automatically normalized.
	// * maxOfs - The maximum amount of degrees that current can rotates towards wish.
	// Returns the rotated unit vector.
	static Vector3 RotateVector(Vector3 current, Vector3 wish, double maxOfs)
	{
		current = current.Unit();
		wish = wish.Unit();

		double angle = acos(current dot wish);
		if (angle > maxOfs)
			angle = maxOfs;
		else
			return wish;

		Vector3 rot = (current cross wish).Unit();
		double c = cos(angle);
		double s = sin(angle);

		return (current * c + (rot cross current) * s + rot * (rot dot current) * (1.0 - c)).Unit();
	}

	// Returns yaw from an XY velocity vector.
	// * vel - The source XY velocity.
	static double AngleFromVel(Vector2 vel)
	{
		return atan2(vel.Y, vel.X);
	}

	// Returns the yaw and pitch of a vector.
	// * dir - The vector to get the angles of.
	static Vector2 GetAngles(Vector3 dir)
	{
		return (atan2(dir.Y, dir.X), -atan2(dir.Z, dir.XY.Length()));
	}

	// Returns the vector that makes up the given angles.
	// * yaw - Angle about the z axis.
	// * pitch - Angle about the y axis.
	// * length - Scalar for the vector's final size.
	static Vector3 AnglesToVector(double yaw, double pitch, double length = 1.0)
	{
		return (yaw.ToVector() * cos(pitch), -sin(pitch)) * length;
	}
}
