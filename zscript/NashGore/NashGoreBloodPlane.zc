// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

class NashGoreBloodPlane : Actor abstract
{
	bool bSloped;
	bool bCheckedFloating;
	bool bOnCeiling;
	bool bStopTicking;
	double rndzoffset;
	double zOld, zNew;

	protected int bpFlags;
	flagdef NoRandomAngle: bpFlags, 0;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Height 2;
		FloatBobPhase 0;
		+NOTONAUTOMAP
		+NOGRAVITY
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		ChangeStatNum(STAT_NashGore_Gore);
		NashGoreGameplayStatics.QueueGore();
		rndzoffset = frandom[rnd_SpawnBloodPlane](0.0001, 0.0100);
		A_SetScale(frandom[rnd_SpawnBloodPlane](0.9, 1.0));
		Super.BeginPlay();

		if (!Level.IsPointInLevel(Pos))
		{
			Destroy();
			return;
		}
	}

	override void PostBeginPlay(void)
	{
		if (!bOnCeiling && Pos.Z > FloorZ)
		{
			Destroy();
			return;
		}

		if (bOnCeiling)
			rndzoffset *= -1;

		// not all blood planes should have randomized angles
		if (!bNoRandomAngle)
			Angle = NashGoreGameplayStatics.RandomAngle4();

		zOld = zNew = Pos.Z;

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (!bNoTimeFreeze && isFrozen())
			return;

		if (!bStopTicking)
		{
			Super.Tick();
			bStopTicking = true;

			// do some stuff for a single tick
			if (IsOnSkyFlat() || IsOnLiquid() || IsFloating())
			{
				Destroy();
				return;
			}

			DoAlignToSlope();

			// corpse blood needs collision for footprint effects
			if (!(self is "NashGoreCorpseBlood"))
				bNoInteraction = true;

			// end of single tick
			return;
		}
		else
		{
			if (nashgore_precisefloatcheck)
			{
				// re-run the float check if Z position changed
				// this is potentially fucking slow... especially on moving sectors...
				zNew = Pos.Z;
				if (zOld != zNew)
				{
					bCheckedFloating = false;
					if (IsFloating())
					{
						Destroy();
						return;
					}
					zOld = zNew;
				}
			}

			// advance states
			if (tics != -1)
			{
				if (--tics <= 0)
				{
					if (!SetState(curstate.NextState))
						return;
				}
			}

			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	bool IsOnSkyFlat(void)
	{
		bool result = false;
		if (NashGoreGameplayStatics.CheckSky(self))
			result = true;
		return result;
	}

	bool IsOnLiquid(void)
	{
		bool result = false;
		if (NashGoreGameplayStatics.IsOnFloor(self) && NashGoreGameplayStatics.CheckLiquid(self))
		{
			NashGoreLiquidBlood.SpawnLiquidBlood(self);
			result = true;
		}
		return result;
	}

	bool IsFloating(void)
	{
		bool result = false;

		if (!bCheckedFloating)
		{
			if (!bOnCeiling)
			{
				// floor
				if (Pos.Z <= FloorZ && FloaterDetector.IsFloating(self, false))
					result = true;
			}
			else
			{
				// ceiling
				if (Pos.Z <= CeilingZ && FloaterDetector.IsFloating(self, true))
					result = true;
			}

			bCheckedFloating = true;
		}

		return result;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void DoAlignToSlope(void)
	{
		// TO DO: blood trails aren't slope-aligned
		if (!bSloped && !(self is "NashGoreBloodTrail"))
		{
			NashGoreGameplayStatics.AlignToPlane(self, ceiling: bOnCeiling);
			bSloped = true;
		}
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodSpot : NashGoreBloodPlane
{
	// 30 seconds
	const DRIP_DURATION_MAX = Thinker.TICRATE * 30;
	int dripDuration, dripInterval;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 32.0;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void PostBeginPlay(void)
	{
		/*
		if (Target && !nashgore_spriteblood)
		{
			Color bc = Target.BloodColor;
			if (bc == 0) bc = gameinfo.defaultbloodcolor;
			bc = Color(bc.R / 2, bc.G / 2, bc.B / 2);
			A_SetRenderStyle(1, STYLE_Shaded);
			SetShade(bc);
		}
		*/

		if (nashgore_spriteblood)
		{
			NashGoreGameplayStatics.RandomXFlip(self);
			bForceXYBillboard = true;
		}

		Super.PostBeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (WaterLevel == 0 && bOnCeiling)
		{
			if (dripDuration < DRIP_DURATION_MAX)
			{
				dripDuration++;

				if (dripInterval <= 0)
				{
					dripInterval = random[rnd_BloodDripInterval](20, 200);
					A_SpawnItemEx("NashGoreBloodDrop", flags: NashGoreBloodBase.BLOOD_FLAGS);
				}

				dripInterval--;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			if (WaterLevel < 3)
				A_StartSound("nashgore/bloodsplash");

			if (nashgore_spriteblood)
				return A_Jump(256, "BloodSpotSprite1", "BloodSpotSprite2", "BloodSpotSprite3", "BloodSpotSprite4");

			return A_Jump(256, "BloodSpot1", "BloodSpot2", "BloodSpot3", "BloodSpot4", "BloodSpot5", "BloodSpot6", "BloodSpot7", "BloodSpot8");
		}
		Stop;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	BloodSpot1:
		NGMV A -1;
		Stop;
	BloodSpot2:
		NGMV B -1;
		Stop;
	BloodSpot3:
		NGMV C -1;
		Stop;
	BloodSpot4:
		NGMV D -1;
		Stop;
	BloodSpot5:
		NGMV E -1;
		Stop;
	BloodSpot6:
		NGMV F -1;
		Stop;
	BloodSpot7:
		NGMV G -1;
		Stop;
	BloodSpot8:
		NGMV H -1;
		Stop;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	BloodSpotSprite1:
		NSPT A -1;
		Stop;
	BloodSpotSprite2:
		NSPT B -1;
		Stop;
	BloodSpotSprite3:
		NSPT C -1;
		Stop;
	BloodSpotSprite4:
		NSPT D -1;
		Stop;
	}
}

class NashGoreBloodSpotSmall : NashGoreBloodSpot
{
	Default
	{
		Radius 8.0;
	}
}

class NashGoreBloodSpotCeiling : NashGoreBloodSpot
{
	// uses a different Z offset in the MODELDEF
}

class NashGoreBloodSpotClassic : NashGoreBloodSpot
{
	Default
	{
		Radius 8.0;
	}
}

class NashGoreBloodSpotClassicCeiling : NashGoreBloodSpotClassic
{
	// uses a different Z offset in the MODELDEF
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreCorpseBlood : NashGoreBloodPlane
{
	bool bDepletedCorpseBlood;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 32.0;
		Height 1.0;
		+SPECIAL
		-SOLID
		-NOGRAVITY
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		if (nashgore_corpseblood == 0)
		{
			Destroy();
			return;
		}

		Super.BeginPlay();
	}

	override void Tick()
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (bDepletedCorpseBlood)
		{
			Destroy();
			return;
		}
	}

	override void Touch(Actor other)
	{
		if (nashgore_footprints == 0)
			return;

		if (other && other is "PlayerPawn")
		{
			let a = NashGoreActor.Find(other);
			if (a)
			{
				a.lastCorpseBloodSteppedOn = self;
				a.footprintDuration = NashGoreActor.MAX_FOOTPRINT_DURATION;

				// reduce blood size every time it is stepped on
				if (NashGoreGameplayStatics.GetVelocity(other) > 0.5)
				{
					A_SetSize(Radius - 0.28);
					A_SetScale(Scale.X - 0.01);
				}

				if (Scale.X <= 0.01)
				{
					// mark it for destruction later
					bDepletedCorpseBlood = true;
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		NGMV A 200;
		NGMV B -1;
		Stop;
	}
}

// These are separate classes, rather than just state variations in the base class
// due to the simplicity of interpolated vertex scaling with a very slow model animation.
// If interpolated actor scaling gets added into the engine, we can condense all
// variations into the base class.
class NashGoreCorpseBlood01 : NashGoreCorpseBlood {}
class NashGoreCorpseBlood02 : NashGoreCorpseBlood {}
class NashGoreCorpseBlood03 : NashGoreCorpseBlood {}
class NashGoreCorpseBlood04 : NashGoreCorpseBlood {}
class NashGoreCorpseBlood05 : NashGoreCorpseBlood {}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreFootprint : NashGoreBloodPlane
{
	Default
	{
		Radius 10.0;
		+NashGoreBloodPlane.NORANDOMANGLE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		if (nashgore_footprints == 0)
		{
			Destroy();
			return;
		}

		Super.BeginPlay();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			sprite = GetSpriteIndex('NGMV');
			frame = nashgore_footprinttype;
		}
		#### # -1;
		Stop;
	}
}

class NashGoreFootprintLeft : NashGoreFootprint {}
class NashGoreFootprintRight : NashGoreFootprint {}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodTrail : NashGoreBloodPlane
{
	// TO DO: the model is actually being rendered with the backface side up. PLEASE FIX!!!

	// the corpse that's producing this blood trail
	Actor mo;

	bool stopSliding;
	int fadeTics;

	const TOO_FAR = 128.0;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 8.0;
		+NashGoreBloodPlane.NORANDOMANGLE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		Super.BeginPlay();
		Scale.X = 1.0;
		Scale.Y = 0.0;
	}

	override void Tick(void)
	{
		Super.Tick();

		if (mo)
		{
			// fix overly-stretched trail if teleporting too far
			bool isTooFar = false;
			if (Distance2D(mo) > TOO_FAR)
				isTooFar = true;
			if (isTooFar)
				stopSliding = true;

			if (!stopSliding)
			{
				Scale.Y = Distance2D(mo) + mo.Radius;

				if (mo.Vel ~== (0, 0, 0) || mo.FloorZ != FloorZ)
				{
					// if the corpse's elevation changed, shorten the blood a bit to reduce overhanging
					if (mo.FloorZ != FloorZ)
						Scale.Y -= (mo.Vel.XY.Length() + mo.Radius);

					stopSliding = true;
				}
			}
		}

		if (!mo || stopSliding)
		{
			fadeTics++;
			if (fadeTics > (Thinker.TICRATE * 5))
				A_FadeOut(0.07);
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 1 NoDelay
		{
			return A_Jump(256, "BloodTrail1", "BloodTrail2", "BloodTrail3");
		}
		Stop;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	BloodTrail1:
		NGMV A -1;
		Stop;
	BloodTrail2:
		NGMV B -1;
		Stop;
	BloodTrail3:
		NGMV C -1;
		Stop;
	}
}
