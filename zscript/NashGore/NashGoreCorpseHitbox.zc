// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

class NashGoreCorpseHitbox : Actor
{
	// TO DO: handle these from blocking teleportation
	// https://forum.zdoom.org/viewtopic.php?f=15&t=66095&p=1121307&hilit=gibable#p1121307

	// the actor corpse that "owns" this hitbox
	Actor corpseOwner;

	bool ticked;

	const GIBBABLE_CORPSE_DELAY = 50;
	const DESTROY_TICS = 20;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Health 100;
		Mass int.max;
		+NONSHOOTABLE // make sure projectiles can pass through!
		+NOTAUTOAIMED
		+NOTONAUTOMAP
		+NEVERTARGET
		+NOTARGET
		+ALWAYSTELEFRAG
		+NOTELEOTHER
		+DONTTHRUST
		+DONTBLAST
		+CANNOTPUSH
		+NOTRIGGER
		+DONTGIB
		+DONTSPLASH
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		if (!ticked)
		{
			Super.Tick();
			ticked = true;
			return;
		}
		else
		{
			if (GetAge() > GIBBABLE_CORPSE_DELAY)
			{
				bShootable = nashgore_gibbablecorpses;
				bNoDamage = !nashgore_gibbablecorpses;
			}

			if (corpseOwner)
			{
				// gibbable corpses was deactivated
				if (!nashgore_gibbablecorpses && corpseOwner)
				{
					let a = NashGoreActor.Find(corpseOwner);
					if (a)
					{
						a.spawnedCorpseHitbox = false;
						SetStateLabel("RemoveFromGame");
					}
				}

				// if the owner's health is > 0, assume that it has been revived
				if (corpseOwner.Health > 0)
				{
					SetStateLabel("RemoveFromGame");
				}

				// update position
				SetOrigin(corpseOwner.Pos, false);
				Angle = corpseOwner.Angle;

				// update the hitbox height based on the current sprite
				let st = corpseOwner.CurState;
				let tex = st.GetSpriteTexture(0);
				Vector2 texSize = TexMan.GetScaledSize(tex);
				Height = texSize.Y * 0.833;
			}

			// advance states
			if (tics != -1)
			{
				if (--tics <= 0)
				{
					if (!SetState(curstate.NextState))
						return;
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Death:
		#### # DESTROY_TICS
		{
			if (corpseOwner)
			{
				A_SetMass(GetDefaultByType(corpseOwner.GetClass()).Mass);

				if (!corpseOwner.bNoBlood)
					NashGoreGibs.SpawnGibs(self);

				corpseOwner.Destroy();
			}
		}
		Stop;
	RemoveFromGame:
		#### # DESTROY_TICS;
		Stop;
	}
}
