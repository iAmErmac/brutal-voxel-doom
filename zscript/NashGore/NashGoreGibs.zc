// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

class NashGoreGibs : Actor
{
	int rollDir;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 8.0;
		Height 4.0;
		Gravity 0.575;
		BounceType 'Doom';
		BounceFactor 0.5;
		BounceSound "nashgore/gibbounce";
		+DONTSPLASH
		+MISSILE
		+NOBLOCKMAP
		+THRUACTORS
		+NOTELEPORT
		+CANBOUNCEWATER
		+FLOORCLIP
		+MOVEWITHSECTOR
		+USEBOUNCESTATE
		+ROLLSPRITE
		+ROLLCENTER
		+INTERPOLATEANGLES
		+FORCEXYBILLBOARD
		+NOTONAUTOMAP
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		ChangeStatNum(STAT_NashGore_Gore);
		NashGoreGameplayStatics.QueueGore();
		NashGoreGameplayStatics.RandomXFlip(self);
		rollDir = RandomPick[rnd_GibRollDir](-1, 1);
		bouncefactor *= frandom[rnd_GibBounceFac](0.5, 1.25);
		Super.BeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (NashGoreGameplayStatics.CheckSky(self))
		{
			Destroy();
			return;
		}

		// unboing sprite scale
		if (Scale.X > 1.0)
			Scale.X *= 0.935;

		if (WaterLevel >= 3)
		{
			Vel.X *= 0.95;
			Vel.Y *= 0.95;
			bNoBounceSound = true;
		}
		else
		{
			bNoBounceSound = false;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void SpawnGibs(Actor mo)
	{
		if (nashgore_gibtype == 2)
			return;

		if (!mo)
			return;

		mo.A_StartSound("nashgore/xdeath", CHAN_AUTO);

		// spray blood decals
		NashGoreBloodBase.SprayBloodDecals(mo);

		double spawnRadius = mo.Default.Radius;
		double spawnHeight = mo.Default.Height * 0.5;

		// get monster's "size" and cap it to something sensible
		int size = int(mo.Mass * 0.150);
		//Console.Printf("size before clamp: %d", size);
		size = clamp(size, 0, 50);
		//Console.Printf("size after clamp: %d", size);

		for (int i = 0; i < size; i++)
		{
			// spawn gibs
			int amt, cmul;
			[amt, cmul] = NashGoreGameplayStatics.GetAmountMult(nashgore_gibmult, 100);
			for (int i = 0; i < amt; i++)
			{
				mo.A_SpawnItemEx("NashGoreGibs",
					zofs: spawnHeight,
					frandom[rnd_SpawnGibs](-3.125, 3.125), frandom[rnd_SpawnGibs](-3.125, 3.125), frandom[rnd_SpawnGibs](0.0, 12.5),
					flags: SXF_USEBLOODCOLOR, cmul);
			}

			// spawn lots of blood
			if (random[rnd_SpawnGibs]() < 192)
			{
				bool result;
				Actor blood;
				[result, blood] =
				mo.A_SpawnItemEx("Blood",
					frandom[rnd_SpawnGibs](-spawnRadius, spawnRadius), frandom[rnd_SpawnGibs](-spawnRadius, spawnRadius), frandom[rnd_SpawnGibs](spawnHeight, (spawnHeight * 2.0)),
					frandom[rnd_SpawnGibs](-2.0, 2.0), frandom[rnd_SpawnGibs](-2.0, 2.0), frandom[rnd_SpawnGibs](0.0, 5.0),
					frandom[rnd_SpawnGibs](0.0, 360.0), SXF_USEBLOODCOLOR);

				// target holds the correct blood color
				if (blood)
					blood.Target = mo;
			}

			// spawn sticky gibs and ceiling blood
			if (nashgore_gibtype == 0)
			{
				FLineTraceData t;
				int flags = TRF_THRUACTORS;

				double ang = frandom[rnd_SpawnGibs](0.0, 360.0);

				double dist = 128.0;

				int amt = NashGoreGameplayStatics.GetAmountMult(nashgore_gibmult);
				for (int i = 0; i < amt; i++)
				{
					mo.LineTrace(ang, dist, frandom[rnd_SpawnGibs](-90.0, 0.0), flags, spawnHeight, data: t);

					if (t.HitType == t.TRACE_HitCeiling)
					{
						// ceiling blood
						if (nashgore_bloodtype == 0 || nashgore_bloodtype == 1)
						{
							class<Actor> cls;
							if (nashgore_bloodtype == 0)
								cls = "NashGoreBloodSpotCeiling";
							else if (nashgore_bloodtype == 1)
								cls = "NashGoreBloodSpotClassicCeiling";

							let blood = (random[rnd_SpawnGibs]() < 150) ? Spawn(cls, mo.Pos, ALLOW_REPLACE) : NULL;
							if (blood)
							{
								blood.Translation = mo.BloodTranslation;
								blood.Gravity = 0.0;
								blood.SetOrigin(t.HitLocation, true);
								NashGoreBloodSpot(blood).bOnCeiling = true;

								// flip sprite Y
								if (nashgore_spriteblood)
									blood.Scale.Y *= -1;
							}
						}

						// ceiling gib
						let gib = (random[rnd_SpawnGibs]() < 200) ? Spawn("NashGoreStickyGibsCeiling", mo.Pos, ALLOW_REPLACE) : NULL;
						if (gib)
						{
							gib.Translation = mo.BloodTranslation;
							gib.SetOrigin(t.HitLocation, true);
							NashGoreStickyGibsCeiling(gib).bOnCeiling = true;
							gib.Angle = ang;
						}
					}

					// spawn wall gibs
					if (t.HitType == t.TRACE_HitWall)
					{
						// wall gib
						let gib = (random[rnd_SpawnGibs]() < 100) ? Spawn("NashGoreStickyGibsWall", mo.Pos, ALLOW_REPLACE) : NULL;
						if (gib)
						{
							gib.Translation = mo.BloodTranslation;
							double posAdjust = -4.0f;
							Vector3 stickPos = (t.HitLocation.X + cos(ang) * posAdjust, t.HitLocation.Y + sin(ang) * posAdjust, t.HitLocation.Z);
							gib.SetOrigin(stickPos, true);

							// actually face the wall's angle
							let wall = t.HitLine;
							double wallAngle = atan2(wall.delta.Y, wall.delta.X) + 90.0;
							if (t.LineSide == 1)
								wallAngle += 180.0;
							wallAngle += 180.0;
							gib.Angle = wallAngle;
						}
					}
				}
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "Gib1", "Gib2", "Gib3", "Gib4", "Gib5", "Gib6", "Gib7", "Gib8", "Gib9", "Gib0");
		Stop;
	Gib1:
		GIB1 A 0;
		Goto SpawnLoop;
	Gib2:
		GIB2 A 0;
		Goto SpawnLoop;
	Gib3:
		GIB3 A 0;
		Goto SpawnLoop;
	Gib4:
		GIB4 A 0;
		Goto SpawnLoop;
	Gib5:
		GIB5 A 0;
		Goto SpawnLoop;
	Gib6:
		GIB6 A 0;
		Goto SpawnLoop;
	Gib7:
		GIB7 A 0;
		Goto SpawnLoop;
	Gib8:
		GIB8 A 0;
		Goto SpawnLoop;
	Gib9:
		GIB9 A 0;
		Goto SpawnLoop;
	Gib0:
		GIB0 A 0;
		Goto SpawnLoop;
	SpawnLoop:
		"####" A 1
		{
			A_SetRoll(Roll + ((2.25 * Vel.Length()) * rollDir), SPF_INTERPOLATE);

			// spawn some blood particles
			int failChance = 222;
			bool res;
			Actor mo;
			[res, mo] = A_SpawnItemEx("NashGoreBloodParticle1", flags: NashGoreBloodBase.BLOOD_FLAGS, failChance);
			if (mo)
				mo.A_SetScale(frandom[rnd_GibParticleScale](0.14, 0.4));
		}
		Loop;
	Bounce.Floor:
		"####" "#" 0
		{
			bouncefactor *= 0.73;

			// boing boing
			if (WaterLevel == 0)
				Scale.X = 2.224;

			// spawn one large blood splash upon bounce impact
			Actor bloodSplash;
			bool result;
			[result, bloodSplash] = A_SpawnItemEx("NashGoreBloodFloorSplash", flags: NashGoreBloodBase.BLOOD_FLAGS);
			if (bloodSplash)
				bloodSplash.Scale = (bloodSplash.Scale.X * 2.0, bloodSplash.Scale.Y * 2.0);
		}
		Goto SpawnLoop;
	Death:
		"####" B 0
		{
			A_SetRoll(0);

			// clip gib into terrain
			let t = GetFloorTerrain();

			// clip by 2 map units; ignore the terrain's FootClip value
			if (t && t.FootClip > 0)
				FloorClip = 2.0;

			class<Actor> cls;
			if (nashgore_bloodtype == 0)
				cls = "NashGoreBloodSpot";
			else if (nashgore_bloodtype == 1)
				cls = "NashGoreBloodSpotClassic";
			int failChance = 150;
			A_SpawnItemEx(cls, flags: (NashGoreBloodBase.BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, failChance);

			if (NashGoreHandler.CheckForVoxels())
				NashGoreGameplayStatics.AlignToPlane(self);

			NashGoreGameplayStatics.FixZFighting(self);
		}
		"####" BBBBBBBBBB 1
		{
			if (WaterLevel < 3)
			{
				int failChance = 175;
				A_SpawnItemEx("NashGoreBloodFloorSplashSpawner",
					0, 0, 0,
					frandom[rnd_GibFloorSplash](-4.0, 4.0), frandom[rnd_GibFloorSplash](-4.0, 4.0), frandom[rnd_GibFloorSplash](1.0, 4.0),
					frandom[rnd_GibFloorSplash](0.0, 360.0), NashGoreBloodBase.BLOOD_FLAGS, failChance);
			}
		}
		"####" B -1;
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreStickyGibs : NashGoreGibs
{
	const STICKTIME_MAX = 8;

	int stickTime;
	bool bOnCeiling;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Gravity 0.0005;
		BounceType 'None';
		-MISSILE
		-NOBLOCKMAP
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		stickTime = (Thinker.TICRATE * STICKTIME_MAX) - random[rnd_SpawnStickyGibs](0, Thinker.TICRATE * (STICKTIME_MAX / 2));
		Super.BeginPlay();
	}

	override void PostBeginPlay(void)
	{
		if (bOnCeiling)
		{
			Gravity = 0.0;

			if (NashGoreHandler.CheckForVoxels())
				NashGoreGameplayStatics.AlignToPlane(self, bOnCeiling);
		}

		Super.PostBeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (stickTime > 0)
			stickTime--;

		if (stickTime == 1)
		{
			Scale.Y = 1.0;
			SetStateLabel('Falling');
			Gravity = 1.0;
			bCeilingHugger = false;
			bCorpse = true;
		}
	}
}

class NashGoreStickyGibsCeiling : NashGoreStickyGibs
{
	Default
	{
		YScale -1.0;
		+SPAWNCEILING
		+CEILINGHUGGER
		-MOVEWITHSECTOR
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "Gib1", "Gib2");
		Stop;
	Gib1:
		SGC1 A 0;
		Goto SpawnLoop;
	Gib2:
		SGC2 A 0;
		Goto SpawnLoop;
	SpawnLoop:
		"####" A 1
		{
			Vel.Z = 0.0;
		}
		Loop;
	Falling:
		"####" B -1
		{
			bForceYBillboard = true;
			bForceXYBillboard = false;

			if (Pitch != 0.0 || Roll != 0.0)
			{
				Pitch = 0.0;
				Roll = 0.0;
			}
		}
		Stop;
	Crash:
		"####" A 0
		{
			if (WaterLevel < 3)
				A_StartSound("nashgore/gibsmall");

			bForceYBillboard = false;
			bForceXYBillboard = true;

			if (NashGoreHandler.CheckForVoxels())
				NashGoreGameplayStatics.AlignToPlane(self);

			NashGoreGameplayStatics.FixZFighting(self);
		}
		"####" A -1;
		Stop;
	}
}

class NashGoreStickyGibsWall : NashGoreStickyGibs
{
	Default
	{
		+FORCEYBILLBOARD
		-MOVEWITHSECTOR
		-FORCEXYBILLBOARD
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (stickTime > 0)
			Scale.Y *= 1.001;
		else
			Scale.Y = 1.0;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "Gib1", "Gib2");
		Stop;
	Gib1:
		SGW1 A 0;
		Goto SpawnLoop;
	Gib2:
		SGW2 A 0;
		Goto SpawnLoop;
	SpawnLoop:
		"####" A -1;
		Stop;
	Falling:
		"####" A -1;
		Stop;
	Crash:
		"####" B 0
		{
			if (WaterLevel < 3)
				A_StartSound("nashgore/gibsmall");

			bForceYBillboard = false;
			bForceXYBillboard = true;

			NashGoreGameplayStatics.FixZFighting(self);
		}
		"####" B -1;
		Stop;
	}
}
