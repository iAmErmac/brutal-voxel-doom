// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

class NashGoreSquishyGibs : RealGibs
{
	const SPRITE_HEIGHT = 80.0;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 12.5;
		//+MASTERNOSEE
		+FORCEYBILLBOARD
		+NOTONAUTOMAP
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		if (!nashgore_squish)
		{
			Destroy();
			return;
		}

		ChangeStatNum(STAT_NashGore_Gore);
		NashGoreGameplayStatics.QueueGore();
		NashGoreGameplayStatics.RandomXFlip(self);
		Super.BeginPlay();
	}

	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();

		NashGoreGameplayStatics.FixZFighting(self);

		// Dark-Assassin's fix... unsure if this is the best way, needs more playtesting
		if (CeilingZ - Pos.Z > 16.0)
			Destroy();
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!Master)
		{
			Destroy();
			return;
		}

		// split if resurrected (most likely from the compat setting)
		bool resurrected = Master.InStateSequence(Master.CurState, Master.FindState('Raise'));
		if (resurrected)
		{
			Split();
			return;
		}

		double h = (CeilingZ - FloorZ);
		double squishY = h / SPRITE_HEIGHT;
		Scale.Y = 1.0 * squishY;

		bInvisible = (Scale.Y < 0.01);

		// split if stretched too far
		if (squishY > 3.0)
		{
			Split();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void Split(void)
	{
		double h = (CeilingZ - FloorZ);
		A_StartSound("nashgore/xdeath");
		int failChance = 175;
		for (int i = 0; i < int(h); i++)
		{
			A_SpawnItemEx("NashGoreBloodSpurt",
				0, 0, double(i),
				frandom[rnd_SquishyGibSplit](-2.0, 2.0), frandom[rnd_SquishyGibSplit](-2.0, 2.0), frandom[rnd_SquishyGibSplit](-4.0, 4.0),
				frandom[rnd_SquishyGibSplit](0.0, 360.0), NashGoreBloodBase.BLOOD_FLAGS, failChance);
		}
		Destroy();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		SQSH A 0 NoDelay
		{
			A_StartSound("nashgore/xdeath");
		}
		SQSH A -1;
		Stop;
	}
}
