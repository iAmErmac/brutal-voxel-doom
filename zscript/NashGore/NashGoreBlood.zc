// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

class NashGoreBloodBase : Blood
{
	const BLOOD_FLAGS = SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE |
		SXF_ABSOLUTEVELOCITY | SXF_NOCHECKPOSITION;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		FloatBobPhase 0;
		+NOBLOCKMAP
		+PUFFGETSOWNER
		+FORCEXYBILLBOARD
		+RANDOMIZE
		+DONTSPLASH
		+NOTELEPORT
		+NOTONAUTOMAP
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		Super.BeginPlay();

		if (!Level.IsPointInLevel(Pos))
		{
			Destroy();
			return;
		}

		NashGoreGameplayStatics.RandomXFlip(self);
	}

	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();

		// need to copy blood color to get correct decal color for TraceBleed
		if (Target)
			CopyBloodColor(Target);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void SprayBloodDecals(Actor self, int defaultAmount = 14)
	{
		if (defaultAmount <= 0)
			defaultAmount = 1;
		int amt = NashGoreGameplayStatics.GetAmountMult(nashgore_bloodmult);
		for (int i = 0; i < defaultAmount; i++)
		{
			for (int j = 0; j < amt; j++)
			{
				self.TraceBleedAngle(random[rnd_SprayBloodDecals](10, 100), frandom[rnd_SprayBloodDecals](0.0, 360.0), frandom[rnd_SprayBloodDecals](-70.0, 0.0));
			}
		}
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodImpact : NashGoreBloodBase
{
	double impactSoundVolume;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Scale 0.75;
		+NOINTERACTION
		+NOGRAVITY
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		Super.BeginPlay();
		impactSoundVolume = NashGoreHandler.GetBloodImpactSoundVolume();
	}

	override void PostBeginPlay(void)
	{
		Super.PostBeginPlay();
		NashGoreGameplayStatics.RandomXFlip(self);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_StartSound("nashgore/bullethitflesh", volume: impactSoundVolume);
		BLIM ABCDE 3;
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreDefaultBlood : NashGoreBloodBase
{
	int chanceMod;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		+NOGRAVITY
		-RANDOMIZE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 { chanceMod = 0;		return ResolveState("Spawn2"); }
		TNT1 A 0 { chanceMod = 100;		return ResolveState("Spawn2"); }
		TNT1 A 0 { chanceMod = 220;		return ResolveState("Spawn2"); }
	Spawn2:
		TNT1 A 0
		{
			A_SpawnItemEx("NashGoreBloodImpact", flags: BLOOD_FLAGS);

			for (int i = 0; i < 10; i++)
			{
				int amt, cmul;
				[amt, cmul] = NashGoreGameplayStatics.GetAmountMult(nashgore_bloodmult, chanceMod);
				for (int i = 0; i < amt; i++)
				{
					A_SpawnItemEx("NashGoreBloodParticle1",
						frandom[rnd_SpawnBloodParticle1](-8.0, 8.0), frandom[rnd_SpawnBloodParticle1](-8.0, 8.0), frandom[rnd_SpawnBloodParticle1](-8.0, 8.0),
						frandom[rnd_SpawnBloodParticle1](-2.0, 2.0), frandom[rnd_SpawnBloodParticle1](-2.0, 2.0), frandom[rnd_SpawnBloodParticle1](0.0, 4.0),
						frandom[rnd_SpawnBloodParticle1](0.0, 360.0), BLOOD_FLAGS | SXF_TRANSFERPOINTERS, cmul);
				}
			}
		}
		TNT1 AAAAAAAAAA 1
		{
			int amt, cmul;
			[amt, cmul] = NashGoreGameplayStatics.GetAmountMult(nashgore_bloodmult, chanceMod);
			for (int i = 0; i < amt; i++)
			{
				if (random[rnd_SpawnBloodParticle2]() < 177)
				{
					A_SpawnItemEx("NashGoreBloodParticle2",
						frandom[rnd_SpawnBloodParticle2](-8.0, 8.0), frandom[rnd_SpawnBloodParticle2](-8.0, 8.0), frandom[rnd_SpawnBloodParticle2](-8.0, 8.0),
						frandom[rnd_SpawnBloodParticle2](-2.5, 2.5), frandom[rnd_SpawnBloodParticle2](-2.5, 2.5), frandom[rnd_SpawnBloodParticle2](1.0, 2.0),
						frandom[rnd_SpawnBloodParticle2](0.0, 360.0), BLOOD_FLAGS | SXF_TRANSFERPOINTERS, cmul);
				}
				else
				{
					A_SpawnItemEx("NashGoreBloodParticle3",
						frandom[rnd_SpawnBloodParticle3](-4.0, 4.0), frandom[rnd_SpawnBloodParticle3](-4.0, 4.0), frandom[rnd_SpawnBloodParticle3](-4.0, 4.0),
						frandom[rnd_SpawnBloodParticle3](-5.0, 5.0), frandom[rnd_SpawnBloodParticle3](-5.0, 5.0), frandom[rnd_SpawnBloodParticle3](1.0, 4.0),
						frandom[rnd_SpawnBloodParticle3](0.0, 360.0), BLOOD_FLAGS | SXF_TRANSFERPOINTERS, cmul);
				}
			}
		}
		TNT1 AAAAAAAAAA 1
		{
			int amt, cmul;
			[amt, cmul] = NashGoreGameplayStatics.GetAmountMult(nashgore_bloodmult * 0.25, chanceMod);
			for (int i = 0; i < amt; i++)
			{
				A_SpawnItemEx("NashGoreBloodFloorSplashSpawner",
					0, 0, 0,
					frandom[rnd_BloodFloorSplash](-4.0, 4.0), frandom[rnd_BloodFloorSplash](-4.0, 4.0), frandom[rnd_BloodFloorSplash](1.0, 4.0),
					frandom[rnd_BloodFloorSplash](0.0, 360.0), BLOOD_FLAGS | SXF_TRANSFERPOINTERS, cmul);
			}
		}
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodParticle1 : NashGoreBloodBase
{
	bool inDeepWater;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Scale 0.4;
		Gravity 0.3;
		+NOCLIP
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		Super.BeginPlay();

		// it spawned too deep in the water
		if (WaterLevel >= 3)
			inDeepWater = true;
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		// scale up
		A_SetScale(Scale.X + 0.0075);

		// fade out
		if (GetAge() == 10)
			A_SetRenderStyle(1.0, STYLE_Translucent);
		if (GetAge() > 10)
			Alpha *= 0.9;

		// time out
		if (Alpha < 0.01)
		{
			Destroy();
			return;
		}

		// the blood spawned while it was deep in water
		// there's no point in continuing the tick as this blood is too deep in water
		if (inDeepWater)
			return;

		// blood wasn't deep in water, and has collided with the water surface
		if (WaterLevel > 0)
		{
			NashGoreLiquidBlood.SpawnLiquidBlood(self);
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 1 NoDelay A_Jump(256, "Blood1", "Blood2", "Blood3", "Blood4", "Blood5", "Blood6");
		Stop;
	Blood1:
		NBL1 A -1;
		Stop;
	Blood2:
		NBL1 B -1;
		Stop;
	Blood3:
		NBL1 C -1;
		Stop;
	Blood4:
		NBL1 D -1;
		Stop;
	Blood5:
		NBL1 E -1;
		Stop;
	Blood6:
		NBL1 F -1;
		Stop;
	Crash:
		TNT1 A 1
		{
			class<Actor> cls;

			if (random[rnd_FloorSplashSpot]() < 33)
				cls = "NashGoreBloodSpot";
			else
				cls = "NashGoreBloodSpotSmall";

			int failChance = 190;
			A_SpawnItemEx(cls, flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, failChance);
		}
		Stop;
	}
}

class NashGoreBloodParticle2 : NashGoreBloodBase
{
	Default
	{
		Radius 1.0;
		Height 2.0;
		Gravity 0.18;
		+NOCLIP
		+NOBLOCKMAP
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		NBL2 ABCD 4;
		Stop;
	Crash:
		TNT1 A 1;
		Stop;
	}
}

class NashGoreBloodParticle3 : NashGoreBloodBase
{
	Default
	{
		Gravity 0.22;
		Projectile;
		+THRUACTORS
		+ROLLSPRITE
		+ROLLCENTER
	}

	override void BeginPlay(void)
	{
		Super.BeginPlay();
		Roll = NashGoreGameplayStatics.RandomAngle4();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		NBL3 A 1
		{
			A_SetScale(Scale.X * 0.96);
			Vel.Z -= 0.33;

			if (Scale.X < 0.01)
				Destroy();
		}
		Loop;
	Death:
		#### # 1
		{
			if (Target)
				TraceBleedAngle(10, Angle, Pitch);
		}
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreClassicBlood : NashGoreBloodBase
{
	Default
	{
		-RANDOMIZE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			A_SpawnItemEx("NashGoreBloodImpact", flags: BLOOD_FLAGS);

			int amt, cmul;
			[amt, cmul] = NashGoreGameplayStatics.GetAmountMult(nashgore_bloodmult, 110);
			for (int i = 0; i < amt; i++)
			{
				// This shit needs to be in the Spawn state for translations to work correctly. >8[
				A_SpawnItemEx("NashGoreClassicBloodTrailSpawner",
					xvel: frandom[rnd_SpawnBloodTrail](-6.0, 6.0), frandom[rnd_SpawnBloodTrail](-6.0, 6.0), frandom[rnd_SpawnBloodTrail](0.0, 8.0),
					frandom[rnd_SpawnBloodTrail](0.0, 360.0), SXF_TRANSFERTRANSLATION, cmul);
			}
		}
		Stop;
	}
}

class NashGoreClassicBloodTrailSpawner : NashGoreBloodBase
{
	const DECELERATION_SPEED = 0.963;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 8.0;
		Height 2.0;
		Gravity 0.235;
		+NOFRICTION
		+NOCLIP
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		Vel.XY *= DECELERATION_SPEED;

		if (WaterLevel >= 3)
			A_FadeOut(0.07);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 3
		{
			A_SpawnItemEx("NashGoreClassicBloodTrail", flags: SXF_TRANSFERTRANSLATION);
		}
		Loop;
	Crash:
		TNT1 A 0
		{
			A_StartSound("nashgore/bloodsplash");
			A_SpawnItemEx("NashGoreBloodSpotClassic", flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION);
		}
		Stop;
	}
}

class NashGoreClassicBloodTrail : NashGoreBloodBase
{
	Default
	{
		Radius 1.0;
		Height 1.0;
		Gravity 0.235;
		Scale 0.67;
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (WaterLevel > 0)
		{
			A_FadeOut(0.01);
			Vel.Z = -1;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		NTRL ABCD 4;
		Loop;
	Crash:
		TNT1 AAAAA 1
		{
			int failChance = 220;
			A_SpawnItemEx("NashGoreBloodFloorSplash",
				frandom[rnd_SpawnFloorSplash](-32.0, 32.0), frandom[rnd_SpawnFloorSplash](-32.0, 32.0),
				flags: SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION, failChance);

			failChance = 254;
			A_SpawnItemEx("NashGoreBloodSpotClassic",
				frandom[rnd_SpawnFloorSplash](-32.0, 32.0), frandom[rnd_SpawnFloorSplash](-32.0, 32.0),
				flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, failChance);
		}
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodSpurtSpawner : Actor
{
	int spurtInterval;
	int spurtDuration;
	Actor spurter;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		FloatBobPhase 0;
		+DONTSPLASH
		+NOTELEPORT
		+NOBLOCKMONST
		+NOBLOCKMAP
		+MOVEWITHSECTOR
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (!spurter)
		{
			Destroy();
			return;
		}

		if (spurtInterval == 0)
		{
			spurtInterval = random[rnd_BloodSpurtInit](10, 75);
			spurtDuration = random[rnd_BloodSpurtInit](5, 20);
		}
		else if (spurtInterval > 0)
		{
			spurtInterval--;
		}

		if (spurtDuration > 0)
		{
			int amt, cmul;
			[amt, cmul] = NashGoreGameplayStatics.GetAmountMult(nashgore_bloodmult);
			for (int i = 0; i < amt; i++)
			{
				A_SpawnItemEx("NashGoreBloodSpurt",
					frandom[rnd_SpawnBloodSpurt](-5.0, 5.0), frandom[rnd_SpawnBloodSpurt](-5.0, 5.0), frandom[rnd_SpawnBloodSpurt](15.0, 25.0),
					frandom[rnd_SpawnBloodSpurt](-2.0, 2.0), frandom[rnd_SpawnBloodSpurt](-2.0, 2.0), frandom[rnd_SpawnBloodSpurt](4.0, 8.0),
					frandom[rnd_SpawnBloodSpurt](0.0, 360.0),
					NashGoreBloodBase.BLOOD_FLAGS);
			}

			if (WaterLevel == 0)
			{
				if (random[rnd_SprayBloodDecals]() < 44)
					NashGoreBloodBase.SprayBloodDecals(self, 1);
			}

			spurtDuration--;
		}

		if (GetAge() >= (Thinker.TICRATE * 5))
		{
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	}
}

class NashGoreBloodSpurt : NashGoreBloodBase
{
	Default
	{
		Gravity 0.4326;
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		Super.BeginPlay();
		Gravity *= frandom[rnd_BloodSpurtGravity](1.0, 1.5);
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (WaterLevel > 0)
		{
			A_SetRenderStyle(Alpha, STYLE_Translucent);
			Alpha *= 0.945;
			if (Alpha < 0.01)
			{
				Destroy();
				return;
			}
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		NBL2 ABCD 5;
		Loop;
	Crash:
		TNT1 A 1
		{
			int failChance = 100;
			A_SpawnItemEx("NashGoreBloodFloorSplash",
				frandom[rnd_BloodFloorSplash](-32.0, 32.0), frandom[rnd_BloodFloorSplash](-32.0, 32.0),
				flags: SXF_TRANSFERTRANSLATION | SXF_ABSOLUTEPOSITION | SXF_NOCHECKPOSITION, failChance);

			if (nashgore_bloodtype == 0 || nashgore_bloodtype == 1)
			{
				class<Actor> cls;

				if (nashgore_bloodtype == 0)
					cls = "NashGoreBloodSpot";
				else if (nashgore_bloodtype == 1)
					cls = "NashGoreBloodSpotClassic";

				failChance = 230;
				A_SpawnItemEx(cls, flags: (BLOOD_FLAGS | SXF_TRANSFERPOINTERS) & ~SXF_NOCHECKPOSITION, failChance);
			}
		}
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodFloorSplashSpawner : Actor
{
	Default
	{
		Radius 1.0;
		Height 1.0;
		Gravity 0.5;
		FloatBobPhase 0;
		+CORPSE
		+DONTSPLASH
		+NOTELEPORT
		+NOBLOCKMONST
		+NOBLOCKMAP
		-SOLID
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A -1;
		Stop;
	Crash:
		TNT1 A 0 A_SpawnItemEx("NashGoreBloodFloorSplash", flags: NashGoreBloodBase.BLOOD_FLAGS);
		Stop;
	}
}

class NashGoreBloodFloorSplash : NashGoreBloodBase
{
	Default
	{
		Radius 1.0;
		Height 2.0;
		Scale 0.5;
		-NOBLOCKMAP
		-RANDOMIZE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (WaterLevel > 1)
		{
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		BDRP BCDEF 4;
		Stop;
	}
}

//===========================================================================
//
//
//
//===========================================================================

class NashGoreBloodDrop : NashGoreBloodBase
{
	Default
	{
		Scale 0.35;
		+FORCEYBILLBOARD
		+CORPSE
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		Super.BeginPlay();

		// it spawned too deep in the water
		if (WaterLevel >= 3)
		{
			Destroy();
			return;
		}
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		if (WaterLevel > 0)
		{
			NashGoreLiquidBlood.SpawnLiquidBlood(self);
			A_PlayBloodDropSound();
			Destroy();
			return;
		}
	}

	void A_PlayBloodDropSound(void)
	{
		if (random[rnd_BloodDropSound]() < 180)
			A_StartSound("nashgore/blooddrop");
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		BDRP A -1;
		Stop;
	Crash:
		TNT1 A 0
		{
			if (NashGoreGameplayStatics.CheckLiquid(self))
				NashGoreLiquidBlood.SpawnLiquidBlood(self);
			else
				A_SpawnItemEx("NashGoreBloodFloorSplash", flags: BLOOD_FLAGS);

			A_PlayBloodDropSound();
		}
		Stop;
	}
}
