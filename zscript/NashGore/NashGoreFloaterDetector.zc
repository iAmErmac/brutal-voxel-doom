// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

struct FloaterDetector play
{
	static bool IsFloating(Actor mo, bool isOnCeiling)
	{
		if (!mo)
			return false;

		if ((!isOnCeiling && mo.Pos.Z > mo.FloorZ) || (isOnCeiling && mo.Pos.Z + mo.Height < mo.CeilingZ))
			return true;

		double temp;
		Sector sec;
		F3DFloor ffloor;
		Vector3 normal;

		if (isOnCeiling)
		{
			[temp, sec, ffloor] = mo.CurSector.NextHighestCeilingAt(mo.Pos.X, mo.Pos.Y, mo.Pos.Z, mo.Pos.Z + 1.0);
			normal = ffloor ? -ffloor.model.FloorPlane.normal : sec.CeilingPlane.normal;
		}
		else
		{
			[temp, sec, ffloor] = mo.CurSector.NextLowestFloorAt(mo.Pos.X, mo.Pos.Y, mo.Pos.Z + MAP_EPSILON);
			normal = ffloor ? -ffloor.model.CeilingPlane.normal : sec.FloorPlane.normal;
		}

		Vector3 mPos = mo.Pos;
		if (isOnCeiling)
			mPos.Z += mo.Height;

		return CheckFloatingRadius(mPos, mo.Radius, normal, isOnCeiling) || CheckFloatingRadius(mPos, mo.Radius * 0.5, normal, isOnCeiling);
	}

	private static bool CheckFloatingRadius(Vector3 mPos, double mRadius, Vector3 axis, bool isOnCeiling)
	{
		Vector3 offset = axis cross (1.0, 0.0, 0.0);

		for (double ang = 0.0; ang < 360.0; ang += 45.0)
		{
			Vector3 checkPos = Level.Vec3Offset(mPos, RotateVector(offset, axis, ang) * mRadius);
			double flZ = isOnCeiling ?
				Level.PointInSector(checkPos.XY).NextHighestCeilingAt(checkPos.X, checkPos.Y, checkPos.Z, checkPos.Z + 1.0) :
				Level.PointInSector(checkPos.XY).NextLowestFloorAt(checkPos.X, checkPos.Y, checkPos.Z + MAP_EPSILON);
			if (!(flZ ~== checkPos.Z))
				return true;
		}

		return false;
	}

	private static Vector3 RotateVector(Vector3 vec, Vector3 axis, double ang)
	{
		if (ang ~== 0.0)
			return vec;

		double c = cos(ang);
		return (vec * c + (axis cross vec) * sin(ang) + axis * (axis dot vec) * (1.0 - c)).Unit();
	}
}
