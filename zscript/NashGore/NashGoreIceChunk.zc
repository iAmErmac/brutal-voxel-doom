// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

class NashGoreIceChunk : IceChunk
{
	int rollDir;
	double rollSpeed;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 5.0;
		Height 10.0;
		BounceType 'Doom';
		BounceFactor 0.545;
		Gravity 0.784;
		+ROLLSPRITE
		+ROLLCENTER
		+MISSILE
		+NOTELEPORT
		+FLOORCLIP
		+FORCEXYBILLBOARD
		+NOTONAUTOMAP
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		ChangeStatNum(STAT_NashGore_Gore);
		NashGoreGameplayStatics.QueueGore();
		NashGoreGameplayStatics.RandomXFlip(self);

		rollDir = RandomPick[rnd_SpawnIceChunk](-1, 1);
		rollSpeed = frandom[rnd_SpawnIceChunk](1.0, 5.0);

		Gravity *= frandom[rnd_SpawnIceChunk](0.75, 1.0);
		bouncefactor *= frandom[rnd_SpawnIceChunk](0.5, 1.0);

		Super.BeginPlay();
	}

	override void Tick(void)
	{
		Super.Tick();

		if (!bNoTimeFreeze && isFrozen())
			return;

		state DeathState = FindState('Death');

		if (!InStateSequence(CurState, DeathState))
			A_SetRoll(Roll + (rollSpeed * rollDir), SPF_INTERPOLATE);

		if (Vel ~== (0, 0, 0))
			A_SetRoll(0);

		if (Vel.Z ~== 0 && (Vel.X > 0 || Vel.Y > 0))
		{
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_Jump(256, "Ice1", "Ice2", "Ice3", "Ice4");
		Stop;
	Ice1:
		ICEN A 0;
		Goto SpawnLoop;
	Ice2:
		ICEN B 0;
		Goto SpawnLoop;
	Ice3:
		ICEN C 0;
		Goto SpawnLoop;
	Ice4:
		ICEN D 0;
		Goto SpawnLoop;
	SpawnLoop:
		// yo, idk why the fucc this needs at least 3 states
		// otherwise the damn game just crashes wtf
		"####" "###" -1;
		Stop;
	Death:
		"####" "#" 0
		{
			NashGoreGameplayStatics.FixZFighting(self);
		}
		"####" "#" -1;
		Stop;
	}
}
