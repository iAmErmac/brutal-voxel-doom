// “Commons Clause” License Condition v1.0
//
// The Software is provided to you by the Licensor under the License, as
// defined below, subject to the following condition.
//
// Without limiting other conditions in the License, the grant of rights under
// the License will not include, and the License does not grant to you, the
// right to Sell the Software.
//
// For purposes of the foregoing, “Sell” means practicing any or all of the
// rights granted to you under the License to provide to third parties, for a
// fee or other consideration (including without limitation fees for hosting or
// consulting/ support services related to the Software), a product or service
// whose value derives, entirely or substantially, from the functionality of
// the Software. Any license notice or attribution required by the License must
// also include this Commons Clause License Condition notice.
//
// Software: NashGore NEXT v1.0
//
// License: BSD-2-Clause
//
// Licensor: Nash Muhandes

// The 2-Clause BSD License
//
// Copyright (c) 2006 - 2024, Nash Muhandes
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice,
//    this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

//===========================================================================
//
// You MAY:
// - Use this mod in your play session, as long as all licenses and headers
//   remain intact
// - Embed this mod into your mods or projects that are FREELY downloadable
//   without any kind of monetary transaction involved, as long as all licenses
//   and headers remain intact
//
// You MAY NOT:
// - Use or embed this mod into your project (either partially or fully) if
//   you are making money off your mod/project, including commercially-sold
//   games, or via crowdfunding platforms like Kickstarter, Patreon, Ko-fi
//   and other similar platforms
//
//===========================================================================

class NashGoreLiquidBlood : Actor
{
	bool inDeepWater;

	//===========================================================================
	//
	//
	//
	//===========================================================================

	Default
	{
		Radius 3.0;
		Height 7.0;
		FloatBobPhase 0;
		+NOGRAVITY
		+DONTSPLASH
		+FLATSPRITE
		+NOTONAUTOMAP
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void BeginPlay(void)
	{
		Super.BeginPlay();

		// find the lowest 3D floor to snap its height to
		if (WaterLevel > 0 && WaterLevel < 3)
		{
			bool is3DLiquid = false;
			double lowest;
			for (int i = 0; i < CurSector.Get3DFloorCount(); i++)
			{
				let ff = CurSector.Get3DFloor(i);
				if ((ff.flags & F3DFloor.FF_EXISTS) && ff.flags & F3DFloor.FF_SWIMMABLE)
				{
					is3DLiquid = true;

					double ch = ff.top.ZatPoint(Pos.XY);
					if (lowest != ch)
					{
						if (lowest > ch)
							lowest = ch;
					}
				}
			}

			if (is3DLiquid)
				SetOrigin((Pos.X, Pos.Y, lowest + 0.1), false);
		}
		else if (WaterLevel >= 3)
		{
			inDeepWater = true;
		}

		if (inDeepWater)
		{
			Destroy();
			return;
		}
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	static void SpawnLiquidBlood(Actor self)
	{
		if (!self)
			return;

		self.A_SpawnItemEx("NashGoreLiquidBlood", angle: NashGoreGameplayStatics.RandomAngle4(), flags: NashGoreBloodBase.BLOOD_FLAGS);
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	States
	{
	Spawn:
		NLIQ A 1
		{
			A_FadeOut(0.01);
			A_SetScale(Scale.X * 1.01);
		}
		Loop;
	}
}
