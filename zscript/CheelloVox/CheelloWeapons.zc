//===========================================================
// Adding voxel weapons
//===========================================================

class MyGlobalVariables : Thinker
{
        PlayerInfo pinf[8];
        int pnum;
        float sideShot;
        Actor voxelWeapons[8];
        string curState[8];
        

	MyGlobalVariables Init()
	{
                pnum = 0;
		ChangeStatNum(STAT_STATIC);
		return self;
	}

	static MyGlobalVariables Get()
	{
		ThinkerIterator it = ThinkerIterator.Create("MyGlobalVariables", STAT_STATIC);
		let p = MyGlobalVariables(it.Next());
		if (p == null)
		{
			p = new("MyGlobalVariables").Init();
		}
		return p;
	}
}

class CheelloWeaponVoxel : Weapon
{
        vector3 modelSizes; //width, leght, height
        property modelSizes : modelSizes; 
        vector3 centerPoint; //x, y ,z
        property centerPoint : centerPoint;
        vector3 offsetPoint; //x, y ,z
        property offsetPoint : offsetPoint;
        
        vector3 offsetAngles; //pitch, angle, roll
        property offsetAngles : offsetAngles;

        float zeroScale;
        property zeroScale : zeroScale;
        float minOffsetTop;
        property minOffsetTop : minOffsetTop;
 
        bool getClose;
        property getClose : getClose;
        bool dontFlip;
        property dontFlip : dontFlip;
        bool switchMe;
        property switchMe : switchMe;
        string myState;
        property myState : myState;
        PlayerInfo playeri;
        property playeri : playeri;

        Default
        {
               +NOGRAVITY
               +INTERPOLATEANGLES
               +NOINTERACTION
               +NOTRIGGER
               +MOVEWITHSECTOR
               +RELATIVETOFLOOR
               -NOLIFTDROP
               -NOBLOCKMAP
               -SOLID
               -BLOCKEDBYSOLIDACTORS
               -BLOCKASPLAYER
               -ALLOWTHRUBITS
               -CROSSLINECHECK
               +NOFRICTION
               +NOTIMEFREEZE
               -BLOCKASPLAYER
	        Inventory.Pickupmessage "";
                
        }
        States
        {
        Spawn:
                TNT1 A 1 {
                                state wep;
                                if(!invoker || !invoker.playeri || !invoker.playeri.ReadyWeapon) {
                                        //A_Log("No invoker!");
                                } else if(invoker.playeri.ReadyWeapon.getClassName() == "CheelloPistol") {  
                                        invoker.zeroScale = .100;   
                                        invoker.modelSizes = (104, 209, 103);
                                        invoker.centerPoint = (-27,-90,52);
                                        invoker.offsetPoint = (0,230,-75);
                                        invoker.offsetAngles = (4,0,0);
                                        invoker.minOffsetTop = -50;
                                        invoker.dontFlip = false;
                                        wep=A_JumpIf(true,"ReadyPistol");
                                } else if (invoker.playeri.ReadyWeapon.getClassName()  == "CheelloShotgun") {
                                        invoker.zeroScale = .125;   
                                        invoker.modelSizes = (48, 234, 99);
                                        invoker.centerPoint = (-24,-117,44);
                                        invoker.offsetPoint = (2,190,-65);
                                        invoker.offsetAngles = (15,0,0);
                                        invoker.minOffsetTop = -50;
                                        invoker.dontFlip = false;
                                        wep=A_JumpIf(true,"ReadyShotgun");
                                } else if (invoker.playeri.ReadyWeapon.getClassName()  == "CheelloSuperShotgun") {
                                        invoker.zeroScale = .125;   
                                        invoker.modelSizes = (59, 1, 55);
                                        invoker.centerPoint = (-29,0,28);
                                        invoker.offsetPoint = (0,180,-70);
                                        invoker.offsetAngles = (7,0,0);
                                        invoker.minOffsetTop = -20;
                                        invoker.dontFlip = false;
                                        wep=A_JumpIf(true,"ReadySuperShotgun");
                                } else if (invoker.playeri.ReadyWeapon.getClassName()  == "CheelloChaingun") {
                                        invoker.zeroScale = .125;   
                                        invoker.modelSizes = (123, 124, 102);
                                        invoker.centerPoint = (-61,-62,17);
                                        invoker.offsetPoint = (0,150,-120);
                                        invoker.offsetAngles = (15,0,0);
                                        invoker.minOffsetTop = -50;
                                        invoker.dontFlip = true;
                                        wep=A_JumpIf(true,"ReadyChaingun");
                                } else if (invoker.playeri.ReadyWeapon.getClassName()  == "CheelloRocketLauncher") {
                                        invoker.zeroScale = .125;   
                                        invoker.modelSizes = (87, 1, 79);
                                        invoker.centerPoint = (-43,0,79);
                                        invoker.offsetPoint = (0,200,-87);
                                        invoker.offsetAngles = (0,0,0);
                                        invoker.minOffsetTop = -20;
                                        invoker.dontFlip = true;
                                        wep=A_JumpIf(true,"ReadyRocketLauncher");
                                } else if (invoker.playeri.ReadyWeapon.getClassName()  == "CheelloPlasmaRifle") {
                                        invoker.zeroScale = .125;   
                                        invoker.modelSizes = (96, 155, 49);
                                        invoker.centerPoint = (-48,-105,25);
                                        invoker.offsetPoint = (0,200,-66.7);
                                        invoker.offsetAngles = (2,0,0);
                                        invoker.minOffsetTop = -20;
                                        invoker.dontFlip = false;
                                        wep=A_JumpIf(true,"ReadyPlasmaRifle");
                                } else if (invoker.playeri.ReadyWeapon.getClassName()  == "CheelloBFG9000") {
                                        invoker.zeroScale = .125;   
                                        invoker.modelSizes = (162, 84, 83);
                                        invoker.centerPoint = (-81,-61,22);
                                        invoker.offsetPoint = (0,170,-155);
                                        invoker.offsetAngles = (20,0,0);
                                        invoker.minOffsetTop = -120;
                                        invoker.dontFlip = true;
                                        wep=A_JumpIf(true,"ReadyBFG9000");
                                } else if (invoker.playeri.ReadyWeapon.getClassName()  == "CheelloChainsaw") {
                                        invoker.zeroScale = .125;   
                                        invoker.modelSizes = (87, 1, 79);
                                        invoker.centerPoint = (-43,0,79);
                                        invoker.offsetPoint = (0,200,-70);
                                        invoker.offsetAngles = (0,0,0);
                                        invoker.minOffsetTop = -20;
                                        invoker.dontFlip = true;
                                        wep=A_JumpIf(true,"ReadyChainsaw");
                                } else if (invoker.playeri.ReadyWeapon.getClassName()  == "CheelloFist") {
                                        invoker.zeroScale = .125;   
                                        invoker.modelSizes = (87, 1, 79);
                                        invoker.centerPoint = (-43,0,79);
                                        invoker.offsetPoint = (0,200,-74);
                                        invoker.offsetAngles = (0,0,0);
                                        invoker.minOffsetTop = -20;
                                        invoker.dontFlip = false;
                                        wep=A_JumpIf(true,"ReadyFist");
                                }
                                invoker.switchMe = false;
                                return wep;
                                
                         }
                Goto Spawn;
        ReadyPistol:   
                PISV A 1 {
                                state stat;
                                if(invoker.switchMe) {
                                        stat=A_JumpIf(true,"Spawn");
                                } else if (invoker.myState == "Fire") {
                                        stat=A_JumpIf(true,"FirePistol");
                                }
                                return stat;
                         }
                Goto ReadyPistol;
        ReadyShotgun:
                SHGV A 1 {      
                                state stat;
                                if(invoker.switchMe) {
                                        stat=A_JumpIf(true,"Spawn");
                                } else if (invoker.myState == "Fire") {
                                        stat=A_JumpIf(true,"FireShotgun");
                                }
                                return stat;
                         }
                Goto ReadyShotgun;
        ReadySuperShotgun:
                SH2V A 1 {state stat; if(invoker.switchMe) { stat=A_JumpIf(true,"Spawn"); } else if (invoker.myState == "Fire") {
                                        stat=A_JumpIf(true,"FireSuperShotgun");
                                } return stat; }
                Goto ReadySuperShotgun;
        ReadyChaingun:
                CHGV A 1 {state stat; if(invoker.switchMe) { stat=A_JumpIf(true,"Spawn"); } else if (invoker.myState == "Fire") {
                                        stat=A_JumpIf(true,"FireChaingun");
                                } return stat; }
                Goto ReadyChaingun;
        ReadyRocketLauncher:
                MISV A 1 {state stat; if(invoker.switchMe) { stat=A_JumpIf(true,"Spawn"); } else if (invoker.myState == "Fire") {
                                        stat=A_JumpIf(true,"FireRocketLauncher");
                                } return stat; }
                Goto ReadyRocketLauncher;
        ReadyPlasmaRifle:
                PLSV A 1 { state stat; if(invoker.switchMe) { stat=A_JumpIf(true,"Spawn"); } else if (invoker.myState == "Flash1") {
                                        stat=A_JumpIf(true,"FlashPlasmaRifle");
                                } else if (invoker.myState == "Flash2") {
                                        stat=A_JumpIf(true,"FlashPlasmaRifle2");
                                } return stat; }
                Goto ReadyPlasmaRifle;
        ReadyBFG9000:
                BFGV A 1 {state stat; if(invoker.switchMe) { stat=A_JumpIf(true,"Spawn"); } else if (invoker.myState == "Fire") {
                                        stat=A_JumpIf(true,"FireBFG9000");
                                } return stat; }
                Goto ReadyBFG9000;
        ReadyChainsaw:
                SAWV A 1 {state stat; if(invoker.switchMe) { stat=A_JumpIf(true,"Spawn"); } else if (invoker.myState == "Fire") {
                                        stat=A_JumpIf(true,"FireChainsaw");
                                } return stat; }
                Goto ReadyChainsaw;
        ReadyFist:
                PUNV A 1 {state stat; if(invoker.switchMe) { stat=A_JumpIf(true,"Spawn"); } else if (invoker.myState == "Fire") {
                                        stat=A_JumpIf(true,"FireFist");
                                } return stat; }
                Goto ReadyFist;
        FireFist:
                PUNV B 4;
                PUNV C 4;
                PUNV D 5;
                PUNV C 4;
                PUNV B 5 { return A_JumpIf(invoker.myState == "Fire","FireFist"); }
                Goto ReadyFist;
        FireChainsaw:
                SAWV AB 4 A_Saw;
                SAWV B 0 { return A_JumpIf(invoker.myState == "Fire","FireChainsaw"); }
                Goto ReadyChainsaw;
	FirePistol:
		PISV A 0;
		PISV A 4;
		PISV B 6 Bright;
		PISV C 4;
		PISV D 5 { return A_JumpIf(invoker.myState == "Fire","FirePistol"); }
		Goto ReadyPistol;
	FireShotgun:
		SHGV E 3 ;
		SHGV F 3 ;
		SHGV A 4 {invoker.bINTERPOLATEANGLES = true;}
		SHGV B 5 {invoker.getClose = true;invoker.modelSizes = (116, 132, 121);invoker.centerPoint = (-59,-107,0);invoker.offsetPoint = (-180,210,-15);invoker.offsetAngles = (0,-20,0);}
 		SHGV C 5 {invoker.modelSizes = (82, 155, 151);invoker.centerPoint = (-41,-77,0);invoker.offsetPoint = (-250,180,-15);invoker.offsetAngles = (0,-40,0);}
 		SHGV D 4 {invoker.modelSizes = (114, 206, 131);invoker.centerPoint = (-57,-103,0);invoker.offsetPoint = (-230,180,-15);invoker.offsetAngles = (0,-40,0);}
		SHGV C 5 {invoker.modelSizes = (82, 155, 151);invoker.centerPoint = (-41,-77,0);invoker.offsetPoint = (-250,180,-15);invoker.offsetAngles = (0,-40,0);}
		SHGV B 5 {invoker.modelSizes = (116, 132, 121);invoker.centerPoint = (-59,-107,0);invoker.offsetPoint = (-180,210,-15);invoker.offsetAngles = (0,-20,0);}
		SHGV A 3 {invoker.getClose = false;invoker.modelSizes = (48, 234, 99);invoker.centerPoint = (-24,-117,44);invoker.offsetPoint = (2,190,-65);invoker.offsetAngles = (15,0,0);invoker.bINTERPOLATEANGLES = true;}
		SHGV A 7 { return A_JumpIf(invoker.myState == "Fire","FireShotgun"); }
		Goto ReadyShotgun;
        FireSuperShotgun:
		SH2V A 3;
		SH2V A 7;
		SH2V B 7;
		SH2V C 7;
		SH2V D 7;
		SH2V E 7;
		SH2V F 7;
		SH2V G 6;
		SH2V H 6{ return A_JumpIf(invoker.myState == "Fire","FireSuperShotgun"); }
		SH2V A 5{ return A_JumpIf(invoker.myState == "Fire","FireSuperShotgun"); }
		Goto ReadySuperShotgun;
        FireChaingun:
		CHGV BC 4 Bright;
		CHGV C 0 { return A_JumpIf(invoker.myState == "Fire","FireChaingun"); }
		Goto ReadyChaingun;
        FireRocketLauncher:
		MISV B 8;
		MISV B 12;
		MISV B 0 { return A_JumpIf(invoker.myState == "Fire","FireRocketLauncher"); }
                Goto ReadyRocketLauncher;
        FirePlasmaRifle:
		PLSV A 3;
		PLSV B 20;
                Goto ReadyPlasmaRifle;
        FlashPlasmaRifle:
		PLFV A 4;
                Goto LightGonePlasmaRifle;
        FlashPlasmaRifle2:
		PLFV B 4;
                Goto LightGonePlasmaRifle;
        LightGonePlasmaRifle:
                PLSV A 0 { State stat;
                                if(invoker.myState == "Flash1") { stat = A_JumpIf(true,"FlashPlasmaRifle");
                                } else if(invoker.myState == "Flash2") { stat = A_JumpIf(true,"FlashPlasmaRifle2");
                                }
                                return stat;
                        }
                PLSV B 20;
                Goto ReadyPlasmaRifle;
        FireBFG9000:
		BFGV A 20;
		BFGV B 10;
		BFGV B 10;
		BFGV B 20 { return A_JumpIf(invoker.myState == "Fire","FireBFG9000"); }
                Goto ReadyBFG9000;
        Death:
                TNT1 A -1;
                Stop;
        }

}

extend class CheelloWeaponVoxel
{

bool started;
PlayerInfo playerinf;
PlayerPawn player;
int playerNumber;
weapon playerWeapon;
MyGlobalVariables g;

string lastState;
float viewHeight;

float bSpeed;
float smoothMoveFactor;
float fineMoveFactor;

vector3 modelPosition;
vector3 newPos;
vector3 postPos;
vector3 oldPos;
vector3 oldPlayerPos;
vector3 newPlayerPos;
vector3 oldPlayerVel;
vector3 newPlayerVel;
vector3 dPlayerPos;
vector3 playerFrontNormal;
vector3 Bob;
vector2 SidePos;
vector2 rotatedPos;
string curState;
float xBob;
float hitDisplacement;
float hitDisplacementS;
float offsetTop;
float oScale;
float oZeroScale;
float distR;
float distR2;
float distZ;
float distZ2;
float selfAngle;
float selfPitch;
float playerRadius;
float playerAngle;
float playerPitch;
float SidePhase;
float weaponPitch;
bool isClose;
int flipped;
float divider;
float scaleMult;
float viewZ;
float lastViewZ;

Actor lastWeapon;
bool hitF;
bool hitF2;
bool hitFB;
bool hitB;
bool hitS;
bool hitSB;
bool hitS2;
bool hitS3;
float ratioFactor;
float ratioFactor2;
float distance;
float sidex;

FLineTraceData RemoteRayF;
FLineTraceData RemoteRayF2;
FLineTraceData RemoteRayFB;
FLineTraceData RemoteRayB;
FLineTraceData RemoteRayS;
FLineTraceData RemoteRaySB;
float toFront;
float toRight;
float toTop;
float toBack;
float toLeft;
float toBottom;
int lasttime;
//bool glitchmessageshown;

float SZ;
float dSZ;
float ddSZ;
float lastFZ;
float lastPFZ;
float lastPZ;
float lastSZ;
float lFZ;
float dPZ;
float zatf;
float dzatf;
float jump;

float dz;
int liftType;
int xcase;


    override void BeginPlay()
    {
        g=MyGlobalVariables.Get();
        Super.BeginPlay();
        playerNumber=g.pnum;
        self.playeri = players[playerNumber];
        playerinf = players[playerNumber];
        player = playerinf.mo;
        playerWeapon = playerinf.ReadyWeapon;
        oldPlayerPos = player.pos;
        hitDisplacement = 0;
        smoothMoveFactor = .25;
        fineMoveFactor = smoothMoveFactor*.25;

    }

    override void Tick(void)
    {
        Super.Tick();

        if(!CVar.GetCVar("cheello_voxelweaponsOn", playerinf).GetInt()) {self.destroy();}
  
        if(!player) {return;}

        if(!self) {return;}

        if((!started && playerinf.PlayerState==0) || playerWeapon != lastWeapon ) {
                
                SidePhase = CVar.GetCVar("cheello_voxelweaponsSide", playerinf).GetInt();
                distR = self.offsetPoint.y*self.zeroScale;
                distZ = self.offsetPoint.z*self.zeroScale;
                distR2 = distR;
                distZ2 = distZ;
                toRight = -self.centerPoint.x*self.zeroScale;
                toFront = -self.centerPoint.y*self.zeroScale;
                toBottom = self.centerPoint.z*self.zeroScale;
                toLeft = self.modelSizes.x*self.zeroScale - toRight;
                toBack = self.modelSizes.y*self.zeroScale - toFront;
                toTop = self.modelSizes.z*self.zeroScale - toBottom;
                viewHeight = playerinf.viewZ;

                oZeroScale = self.zeroScale;
                oScale = oZeroScale;
                scaleMult = 1;
                offsetTop = self.minOffsetTop;
                weaponPitch = -90;
                playerRadius=player.radius;
                ratioFactor = (1+(.2*Abs(player.pitch)/90));
                flipped = CVar.GetCVar("cheello_voxelweaponsSide", playerinf).GetInt()<=0?1:0;
                isClose = false;
                lasttime = MStime();

                started = oScale!=0?true:false;  
                playerWeapon = playerinf.ReadyWeapon;

        }
        if(playerinf.PlayerState!=0 && started) {
                self.A_HideThing();
                started = false;
                return;
        } else if(playerinf.PlayerState!=0) {
                started = false;
                return;
        }

        
        if(consoleplayer != playerNumber) {self.A_HideThing();/*return;*/} else {self.A_UnhideThing();}

        if(!started || !playerWeapon) {
                playerWeapon = playerinf.readyWeapon;
                self.A_UnhideThing();
                return;
        }


        newPlayerPos = player.pos;
        dPlayerPos = newPlayerPos - oldPlayerPos;

       let dPos = oldPos != newPos;
       oldPos = newPos; 

        if(player.FindInventory("PowerInvisibility")) { self.A_SetShadow(); } else { self.RestoreRenderStyle(); }


//self.bMoveWithSector = true;self.bRelativeToFloor = true;dz = 0;// good for going up.
//liftType = 0;self.bMoveWithSector = true;self.bRelativeToFloor = true;self.bNoLiftDrop = false;dz=0; // good for going up and down
//liftType = 1;self.bMoveWithSector = false;self.bRelativeToFloor = false;self.bNoLiftDrop = true;self.setOrigin(postPos, true);// good for edge-situations
//liftType = 2;self.bMoveWithSector = false;self.bRelativeToFloor = false;self.bNoLiftDrop=true;self.setOrigin(postPos, true); // good for normal walking good up against a wall
//liftType = 3;self.bMoveWithSector = false;self.bRelativeToFloor = false;self.bNoLiftDrop=true;dz=0;self.setOrigin(postPos, true); // good for normal walking and enough up against a wall

player.FindFloorCeiling();
self.FindFloorCeiling();
dzatf = getZAt(playerRadius,0,0) - zatf;
zatf = getZAt(playerRadius,0,0);
let dFZ = self.floorz - lastFZ;
let lastdPZ = dPZ;
dPZ = player.curSector.floorplane.ZAtPoint(NewPlayerPos.XY) - lastPFZ;

let fz = player.curSector.floorplane.ZAtPoint(NewPlayerPos.XY);

self.bMoveWithSector = true;self.bRelativeToFloor = true;self.bNoLiftDrop = false;dz=0; // good for going up and down
lastFZ = self.floorz;

let selfSZ = player.curSector.floorplane.ZAtPoint(NewPlayerPos.XY);

self.bMoveWithSector = false;self.bRelativeToFloor = false;self.bNoLiftDrop = true;// good for going up and down

dz = -Max(player.pos.z, fz);
if(selfSZ == lastFZ && player.Vel.z==0) {

if(player.pos.z + dPZ == lastFZ+dPZ) {
dz += dPZ;
self.bMoveWithSector = true;self.bRelativeToFloor = true;self.bNoLiftDrop = false;dz=-Max(player.pos.z, fz);
xcase = 1;
} else {
xcase = 0;
}
} else if (selfSZ != lastFZ && player.Vel.z==0 && dPZ !=0){

xcase = 1 ;

dz += (player.pos.Z-lastPZ);

} else {

xcase = 2;
if(player.floorz == self.floorz) {
dz += (player.vel.length()==0 && dFZ != 0)?player.pos.Z-lastPZ:0;
}
}

lastPFZ = player.curSector.floorplane.ZAtPoint(NewPlayerPos.XY);
lastPZ = player.pos.z;
lastSZ = self.pos.z;
lFZ  = self.pos.z + dFZ;

if(curState && (xcase != 0 || curState != "Ready" || dPlayerPos != (0,0,0) || dPos || player.angle != playerAngle || playerPitch != player.pitch || hitS || hitF || hitF2 || hitFB || hitS2 || hitS3)) {

        flipped = CVar.GetCVar("cheello_voxelweaponsSide", playerinf).GetInt()<=0?0:1;
//console.printf(" "..Screen.GetAspectRatio());

        distR = self.offsetPoint.y*self.zeroScale;
        distZ = self.offsetPoint.z*self.zeroScale;
         if(curState == "Ready") { smoothMoveFactor = .25; fineMoveFactor = smoothMoveFactor*.25;}
        newPlayerVel = player.vel;
        playerAngle = player.angle;
        playerPitch = player.pitch;
        selfPitch = self.pitch;
        selfAngle = self.angle;
        lastViewZ = viewZ;
        viewZ += (playerinf.viewZ-viewZ);
        viewHeight = viewZ+dz;
        ratioFactor = 1/(1+(.2*Abs(playerPitch)/90));
        ratioFactor2 = 1/(1+(.3*Abs(playerPitch)/90));
       
        SidePhase = CVar.GetCVar("cheello_voxelweaponsSide", playerinf).GetInt();
        playerFrontNormal = player.Vec3Angle(1,playerAngle,0)-newPlayerPos;


if(!CVar.GetCVar("cheello_voxelweaponsClose", playerinf).GetInt() || getClose) {

        scaleMult += (1-scaleMult)*smoothMoveFactor;
        oScale += (oZeroScale*playerRadius*.6/distR - oScale)*smoothMoveFactor;
        distR2 += (playerRadius*.6 - distR2)*smoothMoveFactor;
        distZ2 += (distZ*playerRadius*.6/distR - distZ2)*smoothMoveFactor;
} else {
        if(distR2 == playerRadius/2) {
                distR2 = distR;
                distZ2 = distZ;
                oScale = oZeroScale;
        }

        self.setXYZ(newPlayerPos);

            hitF2 = LineTrace(
               playerAngle,
               player.radius+10,
               0,
               TRF_THRUACTORS | TRF_NOSKY ,
               offsetz: viewHeight,
               data: RemoteRayF2
            );

        if(!hitF2) {

            hitF2 = LineTrace(
               playerAngle,
               10,
               0,
               TRF_SOLIDACTORS | TRF_NOSKY ,
               offsetz: viewHeight*.5,
               offsetForward: playerRadius+2,
               data: RemoteRayF2
            );
        if(RemoteRayF2.HitActor && (RemoteRayF2.HitActor == self || RemoteRayF2.HitActor == player)) hitF2 = false;


            hitFB = LineTrace(
               playerAngle,
               (toFront+distR),
               selfPitch,
               TRF_THRUACTORS | TRF_NOSKY ,
               offsetz: viewHeight-5,
               offsetforward: 0,//-playerRadius/3,
               data: RemoteRayFB
            );
        if(RemoteRayFB.HitActor && (RemoteRayFB.HitActor == player && RemoteRayFB.HitActor == self)) {hitFB = false;}

        self.setXYZ(newPos);

            distance = toFront/2;

            hitF = LineTrace(
               playerAngle,
               distance,
               playerPitch,
               TRF_SOLIDACTORS | TRF_NOSKY ,
               offsetz: 0,
               offsetforward: toFront+(newPlayerVel dot playerFrontNormal),
               offsetside: 0,
               data: RemoteRayF
            );

        if(RemoteRayF.HitActor && (RemoteRayF.HitActor == self || RemoteRayF.HitActor == player)) {HitF = false;}
        
            hitB = LineTrace(
               playerAngle,
               toTop+toBottom*.5,
               90,
               TRF_THRUACTORS | TRF_NOSKY ,
               offsetz: toTop,
               offsetforward: toFront*.5,
               data: RemoteRayB
            );
       }

        self.setXYZ(newPlayerPos);
            FLineTraceData RemoteRayS2;
            hitS2 = LineTrace(
               playerAngle-(vectorAngle(-SidePhase*oZeroScale*4-toRight,distR)-90),
               distR+toFront*2,
               20,
               TRF_THRUACTORS | TRF_NOSKY,
               offsetz:viewHeight,
               offsetforward:0,
               data: RemoteRayS2
            );
            FLineTraceData RemoteRayS3;
            hitS3 = LineTrace(
               playerAngle-(vectorAngle(-SidePhase*oZeroScale*4+toLeft,distR)-90),
               distR+toFront*2,
               20,
               TRF_THRUACTORS | TRF_NOSKY,
               offsetz:viewHeight,
               offsetforward:0,
               data: RemoteRayS3
            );
        //if(RemoteRayS2.HitActor && RemoteRayS2.HitActor == player) {hitS2 = false;}
        //if(RemoteRayS3.HitActor && RemoteRayS3.HitActor == player) {hitS3 = false;}

if(!hitS2 || !hitS3) {

           sidex = SidePhase*oZeroScale*4+self.offsetPoint.x*oScale+(flipped?toRight:toLeft)*4;
            
            hitS = LineTrace(
               selfAngle+90*(flipped?-1:1),
               sidex,//(flipped?toRight:toLeft),
               0,
               TRF_SOLIDACTORS | TRF_NOSKY,
               offsetz: viewheight,
               offsetforward: 0,//(flipped?toRight:toLeft),
               offsetside: (self.modelSizes.y*oScale)*(flipped?-1:1),
               data: RemoteRayS
            );
        if(RemoteRayS.HitActor && RemoteRayS.HitActor == player) {hitS = false;}
     
if(hitS && (sidex-RemoteRayS.Distance)<(SidePhase*oZeroScale*4)) {
        hitDisplacementS += ((sidex-RemoteRayS.Distance) - hitDisplacementS)*smoothMoveFactor;
} else if (hitS) {
        hitDisplacementS += ((SidePhase*oScale*4) - hitDisplacementS)*smoothMoveFactor;
} else {
hitDisplacementS *=.125;

}

}

       self.setXYZ(postPos);

                        hitDisplacement = Min(Abs(distance-RemoteRayF.Distance), distance);
                        let closest = (playerRadius+2);

                        distR2 *= playerPitch<0?1:(ratioFactor*GetCrouchFactor());
                        if((hitF && (distR - hitDisplacement) <= closest) || hitFB || hitF2 || hitSB || (!hitF && hitS2) || (!hitF && hitS3)) {
                                let scaleFactor = 0.6;
                                oScale += (oZeroScale*scaleFactor - oScale)*fineMoveFactor;
                                distR2 += (playerRadius*11/16*scaleFactor - distR2)*smoothMoveFactor;
                                distZ2 += (distZ*playerRadius*11/16/distR*scaleFactor+(offsetTop*oScale*(1-playerRadius*11/16/distR)) - distZ2)*smoothMoveFactor;

                        } else {

                                oScale += (oZeroScale - oScale)*fineMoveFactor;
                                distR2 += ((distR - hitDisplacement)-distR2)*smoothMoveFactor;
                                distZ2 += (distZ*distR2/distR+(offsetTop*oScale*(1-distR2/distR))-distZ2)*smoothMoveFactor;
                        }
                         
        
        }

        if(self.dontFlip == false) {
        scale = (1,(flipped?-1:1)/ratioFactor)*oScale*scaleMult;
        } else {
        scale = (1,1/ratioFactor)*oScale*scaleMult;
        }
        weaponPitch += (curState == "Deselect"?((-90 - weaponPitch)/40):((-weaponPitch)/4));

        if(weaponPitch < -50) {self.A_HideThing();}

        rotatedPos = RotateVector((distR2*ratioFactor2, distZ2/ratioFactor2), -playerPitch+weaponPitch);
        SidePos = RotateVector((0,-SidePhase*oZeroScale*4+hitDisplacementS-self.offsetPoint.x*oScale*(flipped?-1:1)), playerAngle)*distR2/distR;
        g.sideShot = SidePos.length();

        newPos = player.Vec3Angle(rotatedPos.x, playerAngle, rotatedPos.y + viewHeight) + (SidePos.x, SidePos.y, 0);

        let fireBob = 1;
        if((lastState != "Fire" && lastState != "Flash") && (curState == "Fire" || curState == "Flash")) {
          fireBob = playerinf.GetWBobFire()/2;
        } else if(curState == "Fire" || curState == "Flash") {
          fireBob = playerinf.GetWBobFire();
        }

        bSpeed=playerinf.GetWBobSpeed();
        let bobFactor = (newPlayerVel.length()>=2?(2.28*(CVar.GetCVar("cheello_voxelweaponsClose", playerinf).GetInt()?1:1)):0)*fireBob*distR2/distR;

        let zBob = (Abs(cos(6*gametic*bSpeed))*(bSpeed==0?0:1));
        zBob = 1+Abs(zBob)*playerWeapon.BobRangeY*bobFactor;
        xBob = -sin(6*gametic*bSpeed)*playerWeapon.BobRangeX*bobFactor;
        let xyBob = RotateVector((xBob,0),playerAngle+90);

        Bob += ((xyBob.x,xyBob.y,-zBob)-Bob)*.125;
        if(multiplayer) { Bob = (0,0,0); }

        let frontPhaseVel = (newPlayerVel dot playerFrontNormal) * playerFrontNormal;
        let phase = multiplayer?4:CVar.GetCVar("cheello_voxelweaponsPhase", playerinf).GetInt();

        postPos = newPos + Bob + CVar.GetCVar("cheello_voxelweaponsPhase", playerinf).GetInt()*.15 * (newPlayerVel - frontPhaseVel*.5) * distR2/distR;

        self.setOrigin(postPos, true);

        A_SetAngle(playerAngle - self.offsetAngles.y*(flipped?-1:1) + xBob*(CVar.GetCVar("cheello_voxelweaponsClose", playerinf).GetInt()?1:0));
        A_SetPitch(self.offsetAngles.x+playerPitch);
        if(self.dontFlip == false) {
                A_SetRoll(180*(flipped));
        } else {
                A_SetRoll(0);
        }

}

oldPlayerPos = newPlayerPos; 
oldPlayerVel = newPlayerVel; 

        curState = g.curState[playerNumber];
        if(curState != lastState) {
                //console.printf("State: "..curState.." @ "..gametic);
                lastState = curState;
                if(curState == "Select") {self.switchMe = true;started=false;oScale=0;oZeroScale = 0;}
                if(curState == "Fire") { smoothMoveFactor = 1; fineMoveFactor = 1;}
                self.myState = curState;
        }
        lastWeapon = playerWeapon;
    }

}
        

class CheelloFist : Fist replaces Fist
{
        action void A_InformCurState(string newState) { MyGlobalVariables.Get().curState[invoker.owner.playerNumber()] = newState; }
	Default
	{
                Weapon.SlotNumber 1;
                
	}

	States
	{
        Ready:
                TNT1 A 0 { A_WeaponReady();A_InformCurState("Ready"); }
                TNT1 A 1 ;
                Loop;
        Deselect:
                TNT1 A 1 { A_Lower();A_InformCurState("Deselect");A_SetRenderStyle(1,STYLE_Normal);}
                Loop;
        Select:
                TNT1 A 1 { A_Raise();A_InformCurState("Select"); A_SetRenderStyle(1,STYLE_None);}
                Loop;
        Fire:
                TNT1 A 0 { A_InformCurState("Fire"); }
                TNT1 A 4;
                TNT1 A 4 { A_Punch(); A_InformCurState("Ready"); }
                TNT1 A 5;
                TNT1 A 4;
                TNT1 A 5 { A_ReFire();}
                Goto Ready;
	}

}



class CheelloChainsaw : Chainsaw replaces Chainsaw
{
        action void A_InformCurState(string newState) { MyGlobalVariables.Get().curState[invoker.owner.playerNumber()] = newState; }
	Default
	{
                Weapon.SlotNumber 1;
		Weapon.Kickback 0;
		Weapon.SelectionOrder 2200;
		Weapon.UpSound "weapons/sawup";
		Weapon.ReadySound "weapons/sawidle";
		Inventory.PickupMessage "$GOTCHAINSAW";
		Obituary "$OB_MPCHAINSAW";
		Tag "$TAG_CHAINSAW";
		+WEAPON.MELEEWEAPON		
		+WEAPON.NOAUTOSWITCHTO
	}

	States
	{
	Ready:
		TNT1 AA 4 {A_WeaponReady();A_InformCurState("Ready"); }
		Loop;
	Deselect:
                TNT1 A 0 { A_InformCurState("Deselect"); }
		TNT1 A 1 { A_Lower(); A_SetRenderStyle(1,STYLE_Normal);}
		Loop;
	Select:
                TNT1 A 0 { A_InformCurState("Select"); }
		TNT1 A 1 A_Raise;
		Loop;
	Fire:
                TNT1 A 0 { A_InformCurState("Fire"); }
		TNT1 AA 4 A_Saw;
		TNT1 A 0 A_ReFire;
		Goto Ready;
	Spawn:
		CSAW A -1;
		Stop;
	}

}


class CheelloPistol : Pistol replaces Pistol
{
        action void A_InformCurState(string newState) { MyGlobalVariables.Get().curState[invoker.owner.playerNumber()] = newState; }
	Default
	{
                Weapon.SlotNumber 2;
                
	}

	States
	{
	Ready:
                TNT1 A 0 { A_InformCurState("Ready"); }
                TNT1 A 1 A_WeaponReady;
		Loop;
	Deselect:
                TNT1 A 0 { A_InformCurState("Deselect"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Lower;
		Loop;
        Select:
                TNT1 A 0 { A_InformCurState("Select"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Raise;
                Loop;
	Fire:
                TNT1 A 0 { A_InformCurState("Fire"); }
		TNT1 A 4;
		TNT1 A 6 A_FirePistol;
		TNT1 A 4;
		TNT1 A 5 A_ReFire;
		Goto Ready;
	Flash:
                TNT1 A 0 { A_InformCurState("Flash"); }
		TNT1 A 7 Bright A_Light1;
		Goto LightDone;
		TNT1 A 7 Bright A_Light1;
		Goto LightDone;
 	Spawn:
                TNT1 A 0 { A_InformCurState("Spawn"); }
		PIST A -1;
		Stop;
	}

}

class CheelloShotgun : Shotgun replaces Shotgun
{
        action void A_InformCurState(string newState) { MyGlobalVariables.Get().curState[invoker.owner.playerNumber()] = newState; }
	Default
	{
                Weapon.SlotNumber 3;
	}
 
	States
	{
	Ready:
                TNT1 A 0 { A_InformCurState("Ready"); }
		TNT1 A 1 A_WeaponReady;
		Loop;
	Deselect:
                TNT1 A 0 { A_InformCurState("Deselect"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Lower;
		Loop;
	Select:
                TNT1 A 0 { A_InformCurState("Select"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Raise;
		Loop;
	Fire:
                TNT1 A 0 { A_InformCurState("Fire"); }
		TNT1 A 3;
		TNT1 A 7 A_FireShotgun;
		TNT1 AA 5;
		TNT1 A 4;
		TNT1 AA 5;
		TNT1 A 3;
		TNT1 A 7 A_ReFire;
		Goto Ready;
	Flash:
                TNT1 A 0 { A_InformCurState("Flash"); }
		TNT1 A 4 Bright A_Light1;
		TNT1 A 3 Bright A_Light2;
		Goto LightDone;
	Spawn:
                TNT1 A 0 { A_InformCurState("Spawn"); }
		SHOT A -1;
		Stop;
	}
}


class CheelloChaingun : Chaingun replaces Chaingun
{
        action void A_InformCurState(string newState) { MyGlobalVariables.Get().curState[invoker.owner.playerNumber()] = newState; }
	Default
	{
                Weapon.SlotNumber 4;
	}
 
	States
	{
	Ready:
                TNT1 A 0 { A_InformCurState("Ready"); }
		TNT1 A 1 A_WeaponReady;
		Loop;
	Deselect:
                TNT1 A 0 { A_InformCurState("Deselect"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Lower;
		Loop;
	Select:
                TNT1 A 0 { A_InformCurState("Select"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Raise;
		Loop;
	Fire:
                TNT1 A 0 { A_InformCurState("Fire"); }
		TNT1 AA 4 A_FireCGun;
		TNT1 A 0 A_ReFire;
		Goto Ready;
	Flash:
                TNT1 A 0 { A_InformCurState("Flash"); }
		TNT1 A 5 Bright A_Light1;
		Goto LightDone;
		TNT1 A 5 Bright A_Light2;
		Goto LightDone;
	Spawn:
		MGUN A -1;
		Stop;
	}
}

class CheelloRocketLauncher : RocketLauncher replaces RocketLauncher
{
        action void A_InformCurState(string newState) { MyGlobalVariables.Get().curState[invoker.owner.playerNumber()] = newState; }
	Default
	{
                Weapon.SlotNumber 5;
	}
	States
	{
	Ready:
                TNT1 A 0 { A_InformCurState("Ready"); }
		TNT1 A 1 A_WeaponReady;
		Loop;
	Deselect:
                TNT1 A 0 { A_InformCurState("Deselect"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Lower;
		Loop;
	Select:
                TNT1 A 0 { A_InformCurState("Select"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Raise;
		Loop;
	Fire:
                TNT1 A 0 { A_InformCurState("Fire"); }
		TNT1 A 8 A_GunFlash;
		TNT1 A 12 A_FireMissile;
		TNT1 A 0 A_ReFire;
		Goto Ready;
	Flash:
                TNT1 A 0 { A_InformCurState("Flash"); }
		TNT1 A 3 Bright A_Light1;
		TNT1 A 4 Bright;
		TNT1 AA 4 Bright A_Light2;
		Goto LightDone;
	Spawn:
		LAUN A -1;
		Stop;
	}
 
}

class CheelloPlasmaRifle : PlasmaRifle replaces PlasmaRifle
{
        action void A_InformCurState(string newState) { MyGlobalVariables.Get().curState[invoker.owner.playerNumber()] = newState; }
	Default
	{
                Weapon.SlotNumber 6;
	}
	States
	{
	Ready:
                TNT1 A 0 { A_InformCurState("Ready"); }
		TNT1 A 1 A_WeaponReady;
		Loop;
	Deselect:
                TNT1 A 0 { A_InformCurState("Deselect"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Lower;
		Loop;
	Select:
                TNT1 A 0 { A_InformCurState("Select"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Raise;
		Loop;
	Fire:
		TNT1 A 3 { A_InformCurState("Fire");A_FirePlasma(); }
		TNT1 A 20 { A_InformCurState("Refire");A_ReFire(); }//A_InformCurState("Ready"); }
		Goto Ready;
	Flash:
		TNT1 A 4 Bright {A_InformCurState("Flash1");A_Light1(); }
		Goto LightDone;
		TNT1 A 4 Bright {A_InformCurState("Flash2");A_Light1(); }
		Goto LightDone;
	Spawn:
		PLAS A -1;
		Stop;
	}

}

class CheelloBFG9000 : BFG9000 replaces BFG9000
{
        action void A_InformCurState(string newState) { MyGlobalVariables.Get().curState[invoker.owner.playerNumber()] = newState; }
	Default
	{
                Weapon.SlotNumber 7;
	}
	States
	{
	Ready:
                TNT1 A 0 { A_InformCurState("Ready"); }
		TNT1 A 1 A_WeaponReady;
		Loop;
	Deselect:
                TNT1 A 0 { A_InformCurState("Deselect"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Lower;
		Loop;
	Select:
                TNT1 A 0 { A_InformCurState("Select"); A_SetRenderStyle(1,STYLE_Normal);}
		TNT1 A 1 A_Raise;
		Loop;
	Fire:
                TNT1 A 0 { A_InformCurState("Fire"); }
		TNT1 A 20 A_BFGsound;
		TNT1 A 10 A_GunFlash;
		TNT1 A 10 A_FireBFG;
		TNT1 A 20 A_ReFire;
		Goto Ready;
	Flash:
                TNT1 A 0 { A_InformCurState("Flash"); }
		TNT1 A 11 Bright A_Light1;
		TNT1 A 6 Bright A_Light2;
		Goto LightDone;
	Spawn:
		BFUG A -1;
		Stop;
	OldFire:
                TNT1 A 0 { A_InformCurState("OldFire"); }
		TNT1 A 10 A_BFGsound;
		TNT1 BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB 1 A_FireOldBFG;
		TNT1 A 0 A_Light0;
		TNT1 A 20 A_ReFire;
		Goto Ready;
	}

}

class CheelloPlasmaBall : PlasmaBall replaces PlasmaBall
{
        //int showMe;
        //property showMe : showMe;

	Default
	{
		Radius 13;
		Height 8;
		Speed 25;
		Damage 5;
		Projectile;
		+RANDOMIZE
		+ZDOOMTRANS
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "weapons/plasmaf";
		DeathSound "weapons/plasmax";
		Obituary "$OB_MPPLASMARIFLE";
                //CheelloPlasmaBall.showMe 0;
	}
	States
	{
	Spawn:
                //TNT1 A 0 NoDelay {invoker.A_HideThing();}
		//PLSS AAAAAABBBBBB 1 Bright; //{if(invoker.showMe >= 0){invoker.A_UnHideThing();A_Log(" "..invoker.showMe);}invoker.showMe++;} 
                PLSS AB 6 Bright;
		Goto Spawn+1;
	Death:
		PLSE ABCDE 4 Bright A_UnHideThing;
		Stop;
	}
}
